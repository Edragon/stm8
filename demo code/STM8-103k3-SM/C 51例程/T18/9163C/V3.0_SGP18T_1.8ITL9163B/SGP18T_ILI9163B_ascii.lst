C51 COMPILER V9.01   SGP18T_ILI9163B_ASCII                                                 04/16/2015 14:23:02 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SGP18T_ILI9163B_ASCII
OBJECT MODULE PLACED IN .\OBJ\SGP18T_ILI9163B_ascii.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE DriverFiles\SGP18T_ILI9163B_ascii.c BROWSE INCDIR(.\DriverFiles) DEBUG OBJE
                    -CTEXTEND PRINT(.\SGP18T_ILI9163B_ascii.lst) TABS(2) OBJECT(.\OBJ\SGP18T_ILI9163B_ascii.obj)

line level    source

   1          #include<reg51.h>
   2          #include "MyType.h"
   3          #include "SGP18T_ILI9163B_config.h"
   4          #include "SGP18T_ILI9163B_ascii.h"
   5          #include "SGP18T_ILI9163B_base.h"
   6          
   7          
   8          /*--------------------------------------------------------------*/
   9          //字库码的引索
  10          /*
  11            (0)  !(1)  "(2)  #(3)  $(4)  %(5)  &(6)  '(7)
  12           ((8)  )(9)  *(10) +(11) ,(12) -(13) .(14) /(15)
  13           0(16) 1(17) 2(18) 3(19) 4(20) 5(21) 6(22) 7(23)
  14           8(24) 9(25) :(26) ;(27) <(28) =(29) >(30) ?(31)
  15           @(32) A(33) B(34) C(35) D(36) E(37) F(38) G(39)
  16           H(40) I(41) J(42) K(43) L(44) M(45) N(46) O(47)
  17           P(48) Q(49) R(50) S(51) T(52) U(53) V(54) W(55)
  18           X(56) Y(57) Z(58) [(59) \(60) ](61) ^(62) _(63)
  19           `(64) a(65) b(66) c(67) d(68) e(69) f(70) g(71)
  20           h(72) i(73) j(74) k(75) l(76) m(77) n(78) o(79)
  21           p(80) q(81) r(82) s(83) t(84) u(85) v(86) w(87)
  22           x(88) y(89) z(90) {(91) |(92) }(93) ~(94)
  23          /*--------------------------------------------------------------*/
  24          
  25          
  26          /*--------------------------------------------------------------*/
  27          //    字体: 8*6字体
  28          //取码规则: 低位在前, 列行扫描, 阴码(1-亮, 0-灭)
  29          //查表方法: 要显示的ASCII码-32就可以得到字库码的指针
  30          unsigned char code Font_code8[][6] = {
  31          {0x00,0x00,0x00,0x00,0x00,0x00},// (0)
  32          {0x00,0x00,0x00,0x4F,0x00,0x00},//!(1)
  33          {0x00,0x00,0x07,0x00,0x07,0x00},//"(2)
  34          {0x00,0x14,0x7F,0x14,0x7F,0x14},//#(3)
  35          {0x00,0x24,0x2A,0x7F,0x2A,0x12},//$(4)
  36          {0x00,0x23,0x13,0x08,0x64,0x62},//%(5)
  37          {0x00,0x36,0x49,0x55,0x22,0x50},//&(6)
  38          {0x00,0x00,0x05,0x03,0x00,0x00},//'(7)
  39          {0x00,0x00,0x1C,0x22,0x41,0x00},//((8)
  40          {0x00,0x00,0x41,0x22,0x1C,0x00},//)(9)
  41          {0x00,0x14,0x08,0x3E,0x08,0x14},//*(10)
  42          {0x00,0x08,0x08,0x3E,0x08,0x08},//+(11)
  43          {0x00,0x00,0x50,0x30,0x00,0x00},//,(12)
  44          {0x00,0x08,0x08,0x08,0x08,0x08},//-(13)
  45          {0x00,0x00,0x60,0x60,0x00,0x00},//.(14)
  46          {0x00,0x20,0x10,0x08,0x04,0x02},///(15)
  47          {0x00,0x3E,0x51,0x49,0x45,0x3E},//0(16)
  48          {0x00,0x00,0x42,0x7F,0x40,0x00},//1(17)
  49          {0x00,0x42,0x61,0x51,0x49,0x46},//2(18)
  50          {0x00,0x21,0x41,0x45,0x4B,0x31},//3(19)
  51          {0x00,0x18,0x14,0x12,0x7F,0x10},//4(20)
  52          {0x00,0x27,0x45,0x45,0x45,0x39},//5(21)
  53          {0x00,0x3C,0x4A,0x49,0x49,0x30},//6(22)
  54          {0x00,0x01,0x71,0x09,0x05,0x03},//7(23)
C51 COMPILER V9.01   SGP18T_ILI9163B_ASCII                                                 04/16/2015 14:23:02 PAGE 2   

  55          {0x00,0x36,0x49,0x49,0x49,0x36},//8(24)
  56          {0x00,0x06,0x49,0x49,0x29,0x1E},//9(25)
  57          {0x00,0x00,0x36,0x36,0x00,0x00},//:(26)
  58          {0x00,0x00,0x56,0x36,0x00,0x00},//;(27)
  59          {0x00,0x08,0x14,0x22,0x41,0x00},//<(28)
  60          {0x00,0x14,0x14,0x14,0x14,0x14},//=(29)
  61          {0x00,0x00,0x41,0x22,0x14,0x08},//>(30)
  62          {0x00,0x02,0x01,0x51,0x09,0x06},//?(31)
  63          {0x00,0x32,0x49,0x79,0x41,0x3E},//@(32)
  64          {0x00,0x7E,0x11,0x11,0x11,0x7E},//A(33)
  65          {0x00,0x7F,0x49,0x49,0x49,0x3E},//B(34)
  66          {0x00,0x3E,0x41,0x41,0x41,0x22},//C(35)
  67          {0x00,0x7F,0x41,0x41,0x22,0x1C},//D(36)
  68          {0x00,0x7F,0x49,0x49,0x49,0x41},//E(37)
  69          {0x00,0x7F,0x09,0x09,0x09,0x01},//F(38)
  70          {0x00,0x3E,0x41,0x49,0x49,0x7A},//G(39)
  71          {0x00,0x7F,0x08,0x08,0x08,0x7F},//H(40)
  72          {0x00,0x00,0x41,0x7F,0x41,0x00},//I(41)
  73          {0x00,0x20,0x40,0x41,0x3F,0x01},//J(42)
  74          {0x00,0x7F,0x08,0x14,0x22,0x41},//K(43)
  75          {0x00,0x7F,0x40,0x40,0x40,0x40},//L(44)
  76          {0x00,0x7F,0x02,0x04,0x02,0x7F},//M(45)
  77          {0x00,0x7F,0x04,0x08,0x10,0x7F},//N(46)
  78          {0x00,0x3E,0x41,0x41,0x41,0x3E},//O(47)
  79          {0x00,0x7F,0x09,0x09,0x09,0x06},//P(48)
  80          {0x00,0x3E,0x41,0x51,0x21,0x5E},//Q(49)
  81          {0x00,0x7F,0x09,0x19,0x29,0x46},//R(50)
  82          {0x00,0x46,0x49,0x49,0x49,0x31},//S(51)
  83          {0x00,0x01,0x01,0x7F,0x01,0x01},//T(52)
  84          {0x00,0x3F,0x40,0x40,0x40,0x3F},//U(53)
  85          {0x00,0x1F,0x20,0x40,0x20,0x1F},//V(54)
  86          {0x00,0x3F,0x40,0x38,0x40,0x3F},//W(55)
  87          {0x00,0x63,0x14,0x08,0x14,0x63},//X(56)
  88          {0x00,0x03,0x04,0x78,0x04,0x03},//Y(57)
  89          {0x00,0x61,0x51,0x49,0x45,0x43},//Z(58)
  90          {0x00,0x00,0x7F,0x41,0x41,0x00},//[(59)
  91          {0x00,0x15,0x16,0x7C,0x16,0x15},//\(60)
  92          {0x00,0x00,0x41,0x41,0x7F,0x00},//](61)
  93          {0x00,0x04,0x02,0x01,0x02,0x04},//^(62)
  94          {0x00,0x40,0x40,0x40,0x40,0x40},//_(63)
  95          {0x00,0x00,0x01,0x02,0x04,0x00},//`(64)
  96          {0x00,0x20,0x54,0x54,0x54,0x78},//a(65)
  97          {0x00,0x7F,0x48,0x44,0x44,0x38},//b(66)
  98          {0x00,0x38,0x44,0x44,0x44,0x20},//c(67)
  99          {0x00,0x38,0x44,0x44,0x48,0x7F},//d(68)
 100          {0x00,0x38,0x54,0x54,0x54,0x18},//e(69)
 101          {0x00,0x08,0x7E,0x09,0x01,0x02},//f(70)
 102          {0x00,0x0C,0x52,0x52,0x52,0x3E},//g(71)
 103          {0x00,0x7F,0x08,0x04,0x04,0x78},//h(72)
 104          {0x00,0x00,0x44,0x7D,0x40,0x00},//i(73)
 105          {0x00,0x20,0x40,0x44,0x3D,0x00},//j(74)
 106          {0x00,0x7F,0x10,0x28,0x44,0x00},//k(75)
 107          {0x00,0x00,0x41,0x7F,0x40,0x00},//l(76)
 108          {0x00,0x7E,0x02,0x0C,0x02,0x7C},//m(77)
 109          {0x00,0x7E,0x04,0x02,0x02,0x7C},//n(78)
 110          {0x00,0x38,0x44,0x44,0x44,0x38},//o(79)
 111          {0x00,0x7C,0x14,0x14,0x14,0x08},//p(80)
 112          {0x00,0x08,0x14,0x14,0x18,0x7C},//q(81)
 113          {0x00,0x7C,0x08,0x04,0x04,0x08},//r(82)
 114          {0x00,0x48,0x54,0x54,0x54,0x20},//s(83)
 115          {0x00,0x04,0x3F,0x44,0x40,0x20},//t(84)
 116          {0x00,0x3C,0x40,0x40,0x20,0x7C},//u(85)
C51 COMPILER V9.01   SGP18T_ILI9163B_ASCII                                                 04/16/2015 14:23:02 PAGE 3   

 117          {0x00,0x1C,0x20,0x40,0x20,0x1C},//v(86)
 118          {0x00,0x3C,0x40,0x30,0x40,0x3C},//w(87)
 119          {0x00,0x44,0x28,0x10,0x28,0x44},//x(88)
 120          {0x00,0x0C,0x50,0x50,0x50,0x3C},//y(89)
 121          {0x00,0x44,0x64,0x54,0x4C,0x44},//z(90)
 122          {0x00,0x00,0x08,0x36,0x41,0x00},//{(91)
 123          {0x00,0x00,0x00,0x7F,0x00,0x00},//|(92)
 124          {0x00,0x00,0x41,0x36,0x08,0x00},//}(93)
 125          {0x00,0x08,0x04,0x08,0x10,0x08},//~(94)
 126          {0x00,0x08,0x08,0x2A,0x1C,0x08},//→(127)
 127          {0x00,0x08,0x1C,0x2A,0x08,0x08},//←(128)
 128          {0x00,0x04,0x02,0x7F,0x02,0x04},//↑(129)
 129          {0x00,0x10,0x20,0x7F,0x20,0x10},//↓(130)
 130          {0x00,0x1C,0x2A,0x32,0x2A,0x1C},//笑面(131)
 131          {0x00,0x1C,0x22,0x44,0x22,0x1C}};//爱心(132)
 132          
 133          
 134          
 135          #if  (PRINTCHAR16 == 1) //字体选择Fixedsys
 136          /*--------------------------------------------------------------*/
 137          //    字体: GulimChe12
 138          //取码规则: 高位在前, 行列扫描, 阴码(1-亮, 0-灭)
 139          //查表方法: 要显示的ASCII码-32就可以得到字库码的指针
 140          unsigned char code Font_code16[][16] = {
 141          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},// (0)
 142          {0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x10,0x10,0x00,0x00},//!(1)
 143          {0x00,0x00,0x24,0x24,0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"(3)
 144          {0x00,0x00,0x48,0x48,0x48,0xFE,0x24,0x24,0x24,0x24,0x24,0x7F,0x12,0x12,0x12,0x00},//#(4)
 145          {0x00,0x10,0x7C,0x92,0x92,0x12,0x14,0x18,0x30,0x50,0x90,0x92,0x92,0x7C,0x10,0x00},//$(5)
 146          {0x00,0x00,0x8C,0x92,0x52,0x32,0x2C,0x10,0x08,0x68,0x94,0x92,0x92,0x60,0x00,0x00},//%(6)
 147          {0x00,0x00,0x18,0x24,0x24,0x24,0x18,0x98,0xA4,0xA2,0x42,0x42,0xA2,0x9C,0x00,0x00},//&(7)
 148          {0x00,0x00,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//'(8)
 149          {0x00,0x20,0x10,0x08,0x08,0x04,0x04,0x04,0x04,0x04,0x04,0x08,0x08,0x10,0x20,0x00},//((9)
 150          {0x00,0x04,0x08,0x10,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0x10,0x10,0x08,0x04,0x00},//)(10)
 151          {0x00,0x00,0x00,0x00,0x00,0x08,0x2A,0x1C,0x14,0x22,0x00,0x00,0x00,0x00,0x00,0x00},//*(11)
 152          {0x00,0x00,0x00,0x00,0x10,0x10,0x10,0xFE,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00},//+(12)
 153          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x08,0x00},//,(13)
 154          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//-(14)
 155          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x00},//.(15)
 156          {0x00,0x00,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00,0x00},///(16)
 157          {0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},//0(17)
 158          {0x00,0x00,0x10,0x1C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00},
 159          {0x00,0x00,0x3C,0x42,0x42,0x40,0x40,0x20,0x10,0x08,0x04,0x02,0x02,0x7E,0x00,0x00},
 160          {0x00,0x00,0x3C,0x42,0x42,0x40,0x40,0x3C,0x40,0x40,0x40,0x42,0x42,0x3C,0x00,0x00},
 161          {0x00,0x00,0x60,0x60,0x50,0x50,0x48,0x48,0x44,0x44,0xFE,0x40,0x40,0x40,0x00,0x00},
 162          {0x00,0x00,0x7E,0x02,0x02,0x02,0x3E,0x42,0x40,0x40,0x40,0x42,0x42,0x3C,0x00,0x00},
 163          {0x00,0x00,0x3C,0x42,0x42,0x02,0x02,0x3E,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},
 164          {0x00,0x00,0x7E,0x40,0x20,0x20,0x10,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x00,0x00},
 165          {0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},
 166          {0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x7C,0x40,0x40,0x42,0x42,0x3C,0x00,0x00},//9(25)
 167          {0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x00,0x00},//:(26)
 168          {0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0x08,0x00,0x00},//;(27)
 169          {0x00,0x00,0x00,0x40,0x30,0x08,0x06,0x01,0x06,0x08,0x30,0x40,0x00,0x00,0x00,0x00},//<(28)
 170          {0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00},//=(29)
 171          {0x00,0x00,0x00,0x02,0x0C,0x10,0x60,0x80,0x60,0x10,0x0C,0x02,0x00,0x00,0x00,0x00},//>(30)
 172          {0x00,0x00,0x38,0x44,0x82,0x82,0x40,0x20,0x10,0x10,0x10,0x00,0x10,0x10,0x00,0x00},//?(31)
 173          {0x00,0x00,0x38,0x44,0x82,0xB2,0xAA,0xAA,0xAA,0xAA,0xD2,0x02,0x84,0x78,0x00,0x00},//@(32)
 174          {0x00,0x00,0x10,0x10,0x10,0x28,0x28,0x28,0x44,0x44,0x7C,0x82,0x82,0x82,0x00,0x00},//A(33)
 175          {0x00,0x00,0x3E,0x42,0x82,0x82,0x42,0x3E,0x42,0x82,0x82,0x82,0x42,0x3E,0x00,0x00},
 176          {0x00,0x00,0x38,0x44,0x82,0x82,0x02,0x02,0x02,0x02,0x82,0x82,0x44,0x38,0x00,0x00},
 177          {0x00,0x00,0x3E,0x42,0x42,0x82,0x82,0x82,0x82,0x82,0x82,0x42,0x42,0x3E,0x00,0x00},
 178          {0x00,0x00,0xFE,0x02,0x02,0x02,0x02,0x7E,0x02,0x02,0x02,0x02,0x02,0xFE,0x00,0x00},
C51 COMPILER V9.01   SGP18T_ILI9163B_ASCII                                                 04/16/2015 14:23:02 PAGE 4   

 179          {0x00,0x00,0xFE,0x02,0x02,0x02,0x02,0x7E,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00},
 180          {0x00,0x00,0x38,0x44,0x82,0x02,0x02,0x02,0xE2,0x82,0x82,0x82,0xC4,0xB8,0x00,0x00},
 181          {0x00,0x00,0x82,0x82,0x82,0x82,0x82,0xFE,0x82,0x82,0x82,0x82,0x82,0x82,0x00,0x00},
 182          {0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00},
 183          {0x00,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x22,0x1C,0x00,0x00},
 184          {0x00,0x00,0x82,0x42,0x22,0x12,0x0A,0x06,0x06,0x0A,0x12,0x22,0x42,0x82,0x00,0x00},
 185          {0x00,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x7E,0x00,0x00},
 186          {0x00,0x00,0x82,0x82,0xC6,0xC6,0xAA,0xAA,0x92,0x92,0x92,0x82,0x82,0x82,0x00,0x00},
 187          {0x00,0x00,0x82,0x86,0x86,0x8A,0x8A,0x92,0x92,0xA2,0xA2,0xC2,0xC2,0x82,0x00,0x00},
 188          {0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},
 189          {0x00,0x00,0x3E,0x42,0x82,0x82,0x82,0x42,0x3E,0x02,0x02,0x02,0x02,0x02,0x00,0x00},
 190          {0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0xA2,0x44,0xB8,0x00,0x00},
 191          {0x00,0x00,0x3E,0x42,0x82,0x82,0x82,0x42,0x3E,0x42,0x82,0x82,0x82,0x82,0x00,0x00},
 192          {0x00,0x00,0x7C,0x82,0x82,0x02,0x04,0x18,0x20,0x40,0x80,0x82,0x82,0x7C,0x00,0x00},
 193          {0x00,0x00,0xFE,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00},
 194          {0x00,0x00,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x7C,0x00,0x00},
 195          {0x00,0x00,0x82,0x82,0x82,0x44,0x44,0x44,0x28,0x28,0x28,0x10,0x10,0x10,0x00,0x00},
 196          {0x00,0x00,0x92,0x92,0x92,0x92,0x92,0xAA,0xAA,0xAA,0x44,0x44,0x44,0x44,0x00,0x00},
 197          {0x00,0x00,0x82,0x82,0x44,0x44,0x28,0x10,0x28,0x28,0x44,0x44,0x82,0x82,0x00,0x00},
 198          {0x00,0x00,0x82,0x82,0x44,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00},
 199          {0x00,0x00,0x7E,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x7E,0x00,0x00},
 200          {0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00},
 201          {0x00,0x00,0x92,0x92,0x92,0xFF,0x92,0xAA,0xAA,0xAA,0x44,0x44,0x44,0x44,0x00,0x00},
 202          {0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00},
 203          {0x00,0x10,0x28,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
 204          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00},
 205          {0x00,0x04,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
 206          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x40,0x7C,0x42,0x42,0x42,0xBC,0x00,0x00},
 207          {0x00,0x00,0x02,0x02,0x02,0x02,0x3A,0x46,0x82,0x82,0x82,0x82,0x46,0x3A,0x00,0x00},
 208          {0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x84,0x02,0x02,0x02,0x02,0x84,0x78,0x00,0x00},
 209          {0x00,0x00,0x80,0x80,0x80,0x80,0xB8,0xC4,0x82,0x82,0x82,0x82,0xC4,0xB8,0x00,0x00},
 210          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x82,0xFE,0x02,0x02,0x84,0x78,0x00,0x00},
 211          {0x00,0x00,0x70,0x08,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00},
 212          {0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x64,0x42,0x42,0x42,0x64,0x58,0x42,0x3C,0x00},
 213          {0x00,0x00,0x02,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0x42,0x42,0x00,0x00},
 214          {0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00},
 215          {0x00,0x00,0x10,0x10,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x0C,0x00},
 216          {0x00,0x00,0x02,0x02,0x02,0x42,0x22,0x12,0x0A,0x06,0x0A,0x12,0x22,0x42,0x00,0x00},
 217          {0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00},
 218          {0x00,0x00,0x00,0x00,0x00,0x00,0x6E,0x92,0x92,0x92,0x92,0x92,0x92,0x92,0x00,0x00},
 219          {0x00,0x00,0x00,0x00,0x00,0x00,0x3A,0x46,0x42,0x42,0x42,0x42,0x42,0x42,0x00,0x00},
 220          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},
 221          {0x00,0x00,0x00,0x00,0x00,0x00,0x3A,0x46,0x82,0x82,0x82,0x46,0x3A,0x02,0x02,0x00},
 222          {0x00,0x00,0x00,0x00,0x00,0x00,0xB8,0xC4,0x82,0x82,0x82,0xC4,0xB8,0x80,0x80,0x00},
 223          {0x00,0x00,0x00,0x00,0x00,0x00,0x74,0x0C,0x04,0x04,0x04,0x04,0x04,0x04,0x00,0x00},
 224          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x02,0x0C,0x30,0x40,0x42,0x3C,0x00,0x00},
 225          {0x00,0x00,0x08,0x08,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x08,0x70,0x00,0x00},
 226          {0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x7C,0x00,0x00},
 227          {0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x82,0x44,0x44,0x28,0x28,0x10,0x10,0x00,0x00},
 228          {0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x92,0x92,0x92,0xAA,0x6C,0x44,0x44,0x00,0x00},
 229          {0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x44,0x28,0x10,0x10,0x28,0x44,0x82,0x00,0x00},
 230          {0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x82,0x44,0x44,0x28,0x28,0x10,0x10,0x0E,0x00},
 231          {0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x40,0x20,0x10,0x08,0x04,0x02,0x7E,0x00,0x00},
 232          {0x00,0x60,0x10,0x10,0x10,0x10,0x10,0x0C,0x10,0x10,0x10,0x10,0x10,0x10,0x60,0x00},
 233          {0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00},
 234          {0x00,0x06,0x08,0x08,0x08,0x08,0x08,0x30,0x08,0x08,0x08,0x08,0x08,0x08,0x06,0x00},
 235          {0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0x72,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
 236          };
 237          /*--------------------------------------------------------------*/
 238          #endif
 239          
 240          /*--------------------------------------------------------------*/
C51 COMPILER V9.01   SGP18T_ILI9163B_ASCII                                                 04/16/2015 14:23:02 PAGE 5   

 241          #if   (PRINTCHAR16  > 0)  //(8*16字体)
 242          /*--------------------------------------------------------------*/
 243          //液晶字符输出(8*16字体)
 244          //x: 0 -15   (行)
 245          //y: 0 -9    (列)
 246          void LCD_printc16(uint8 x, uint8 y, uint8 c_dat,uint16 word_color,uint16 back_color)
 247          {
 248   1        uint8 i,j;
 249   1      
 250   1        ILI9163B_SetPos(x*8,y*16,(x+1)*8-1,(y+1)*16-1);     //定位字符显示区域
 251   1      
 252   1        for(j=0; j <16; j++)
 253   1        {
 254   2          for(i=0; i<8; i++)
 255   2          {
 256   3            if((Font_code16[c_dat-32][j]) & (0x01<<i))
 257   3              ILI9163B_write_para16(word_color);
 258   3            else
 259   3              ILI9163B_write_para16(back_color);
 260   3          }
 261   2        }
 262   1      }
 263          
 264          /*--------------------------------------------------------------*/
 265          //液晶字符串输出(8*16字体)
 266          //x: 0 - 15 (行)
 267          //y: 0 - 9  (列)
 268          void LCD_prints16(uint8 x, uint8 y, uint8 *s_dat,uint16 word_color,uint16 back_color)
 269          {
 270   1        while(*s_dat) LCD_printc16(x++, y, *s_dat++,word_color,back_color);
 271   1      }
 272          /*--------------------------------------------------------------*/
 273          #endif/*16*8字体*/
 274          
 275          
 276          #if  (PRINTCHAR6 == 1)
 277          /*--------------------------------------------------------------*/
 278          //液晶字符输出(6*8字体)
 279          //x: 0 - 20 (行)
 280          //y: 0 -19  (列)
 281          void LCD_printc6(uint8 x, uint8 y, uint8 c_dat,uint16 word_color,uint16 back_color)
 282          {
 283   1        uint8 i,j;
 284   1      
 285   1        ILI9163B_SetPos(x*6,y*8,(x+1)*6-1,(y+1)*8-1);     //定位字符显示区域
 286   1      
 287   1        for(j=0; j<8; j++)
 288   1        {
 289   2          for(i=0; i<6; i++)
 290   2          {
 291   3            if((Font_code8[c_dat-32][i]) & (0x01<<j))
 292   3              ILI9163B_write_para16(word_color);
 293   3            else
 294   3              ILI9163B_write_para16(back_color);
 295   3          }
 296   2        }
 297   1      }
 298          
 299          /*--------------------------------------------------------------*/
 300          //液晶字符串输出(6*8字体)
 301          //x: 0 - 20 (行)
 302          //y: 0 -19 (列)
C51 COMPILER V9.01   SGP18T_ILI9163B_ASCII                                                 04/16/2015 14:23:02 PAGE 6   

 303          void LCD_prints6(uint8 x, uint8 y, uint8 *s_dat,uint16 word_color,uint16 back_color)
 304          {
 305   1        while(*s_dat) LCD_printc6(x++, y, *s_dat++,word_color,back_color);
 306   1      }
 307          
 308          /*--------------------------------------------------------------*/ 
 309          //定位输出数字
 310          //x: 0 - 20  (行)
 311          //y: 0 - 19 (列)
 312          //num: 0 - 65535  要显示的数字
 313          //num_bit: 0 - 5  数字的位数
 314          void LCD_printn6(uint8 x, uint8 y, uint16 num, uint8 num_bit,uint16 word_color,uint16 back_color)
 315          {
 316   1        char i;
 317   1        uint8 ii;
 318   1        uint8 dat[6];
 319   1        for(i = 0; i < 6; i++) dat[i] = 0; i = 0; //初始化数据
 320   1        while(num / 10)               //拆位
 321   1        {
 322   2          dat[i] = num % 10;            //最低位
 323   2          num /= 10; i++;   
 324   2        }
 325   1        dat[i] = num;               //最高位
 326   1        ii = i;                   //保存dat的位数
 327   1        for(; i >= 0; i--)  dat[i] += 48;     //转化成ASCII
 328   1        for(i = 0; i < num_bit; i++)
 329   1        LCD_printc6(x, y + i, ' ',word_color,back_color);   //清显示区域
 330   1        for(i = ii; i >= 0; i--)
 331   1        LCD_printc6(x++, y, dat[i],word_color,back_color);    //输出数值
 332   1      }
 333          /*--------------------------------------------------------------*/
 334          #endif/*8*6字体选择*/
 335          
 336          
 337          #if  (PRINTCHAR8 == 1)
 338          /*--------------------------------------------------------------*/
 339          //液晶字符输出(8*8字体)
 340          //x: 0 - 15 (行)
 341          //y: 0 -19  (列)
 342          void LCD_printc(uint8 x, uint8 y, uint8 c_dat,uint16 word_color,uint16 back_color)
 343          {
 344   1        uint8 i,j;
 345   1      
 346   1        ILI9163B_SetPos(x*8,y*8,(x+1)*8-1,(y+1)*8-1);     //定位字符显示区域
 347   1      
 348   1        for(j=0; j<8; j++)
 349   1        {
 350   2          ILI9163B_write_para16(back_color);
 351   2          for(i=0; i<6; i++)
 352   2          {
 353   3            if((Font_code8[c_dat-32][i]) & (0x01<<j))
 354   3              ILI9163B_write_para16(word_color);
 355   3            else
 356   3              ILI9163B_write_para16(back_color);
 357   3          }
 358   2          ILI9163B_write_para16(back_color);
 359   2        }
 360   1      }
 361          
 362          /*--------------------------------------------------------------*/
 363          //液晶字符串输出(8*8字体)
 364          //x: 0 - 15 (行)
C51 COMPILER V9.01   SGP18T_ILI9163B_ASCII                                                 04/16/2015 14:23:02 PAGE 7   

 365          //y: 0 -19 (列)
 366          void LCD_prints(uint8 x, uint8 y, uint8 *s_dat,uint16 word_color,uint16 back_color)
 367          {
 368   1        while(*s_dat) LCD_printc(x++, y, *s_dat++,word_color,back_color);
 369   1      }
 370          
 371          /*--------------------------------------------------------------*/ 
 372          //定位输出数字
 373          //x: 0 - 15  (行)
 374          //y: 0 - 19 (列)
 375          //num: 0 - 65535  要显示的数字
 376          //num_bit: 0 - 5  数字的位数
 377          void LCD_printn(uint8 x, uint8 y, uint16 num, uint8 num_bit,uint16 word_color,uint16 back_color)
 378          {
 379   1        char i;
 380   1        uint8 ii;
 381   1        uint8 dat[6];
 382   1        for(i = 0; i < 6; i++) dat[i] = 0; i = 0; //初始化数据
 383   1        while(num / 10)               //拆位
 384   1        {
 385   2          dat[i] = num % 10;            //最低位
 386   2          num /= 10; i++;   
 387   2        }
 388   1        dat[i] = num;               //最高位
 389   1        ii = i;                   //保存dat的位数
 390   1        for(; i >= 0; i--)  dat[i] += 48;     //转化成ASCII
 391   1        for(i = 0; i < num_bit; i++)
 392   1        LCD_printc(x, y + i, ' ',word_color,back_color);          //清显示区域
 393   1        for(i = ii; i >= 0; i--)
 394   1        LCD_printc(x, y++, dat[i],word_color,back_color);         //输出数值
 395   1      }
 396          #endif /*8*8字体选择*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    996    ----
   CONSTANT SIZE    =   2126    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      88
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
